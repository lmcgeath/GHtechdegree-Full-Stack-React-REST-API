{"version":3,"sources":["config.js","Context.js","components/Courses.js","components/Header.js","components/CourseDetail.js","components/Form.js","components/UserSignIn.js","components/UserSignUp.js","components/UserSignOut.js","components/CreateCourse.js","components/UpdateCourse.js","PrivateRoute.js","components/UnhandledError.js","components/Forbidden.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["apiBaseUrl","Context","React","createContext","Provider","state","authenticatedUser","Cookies","getJSON","userPassword","api","path","method","body","requiresAuthentication","credentials","url","config","options","headers","JSON","stringify","encodedCredentials","btoa","emailAddress","password","fetch","getUser","a","response","status","json","then","responseData","Error","createUser","user","console","log","data","errors","signIn","encryptedPassword","setState","set","expires","signOut","remove","signUp","userData","window","location","href","message","createCourse","courseData","atob","getCourse","courseId","getCourses","updateCourse","deleteCourse","value","this","actions","props","children","Component","Consumer","withContext","context","Courses","courses","catch","error","history","push","courseList","map","course","key","id","className","to","title","version","xmlns","x","y","viewBox","points","Header","authUser","Fragment","firstName","lastName","ReactMarkdown","require","CourseDetail","courseOwner","match","params","User","source","description","estimatedTime","materialsNeeded","ButtonsDisplay","onClick","cancel","submit","submitButtonText","elements","ErrorsDisplay","onSubmit","event","preventDefault","type","errorsDisplay","length","i","UserSignIn","change","name","target","Form","onChange","placeholder","UserSignUp","confirmPassword","err","passMatchError","UserSignOut","CreateCourse","userId","ownerName","UpdateCourse","authenticatedUserPassword","component","rest","render","pathname","from","CoursesWithContext","HeaderWithContext","CourseDetailWithContext","UserSignInWithContext","UserSignUpWithContext","UserSignOutWithContext","CreateCourseWithContext","UpdateCourseWithContext","App","exact","PrivateRoute","UnhandledError","Forbidden","NotFound","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1d1a086.chunk.js","sourcesContent":["\nexport default {\n  apiBaseUrl: 'http://localhost:5000/api',\n};\n","import React, { Component } from 'react';\nimport config from './config';\n\n//use the JavaScript Cookie library\nimport Cookies from 'js-cookie';\n\n//sets up a context and returns an object with Provider and Consumer properties that are also objects.\nconst Context = React.createContext();\n\nexport class Provider extends Component {\n    //stores the current user name, email and password\n    state = {\n        authenticatedUser: Cookies.getJSON('authenticatedUser') || null,\n        userPassword: Cookies.getJSON('userPassword') || null\n    }\n    \n    //method used to make requests to the REST API\n    api = (path, method = 'GET', body = null, requiresAuthentication = false, credentials = null) => {\n        \n      const url = config.apiBaseUrl + path;\n\n        const options = {\n            method,\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8',\n            },\n        }\n\n        if (body !== null) {\n            options.body = JSON.stringify(body);\n        }\n\n        if (requiresAuthentication) { \n            const encodedCredentials = btoa(`${credentials.emailAddress}:${credentials.password}`);\n            options.headers['Authorization'] = `Basic ${encodedCredentials}`;\n        }\n\n        return fetch(url, options);\n    }\n\n    //method used to retrieve a user from the API.\n    getUser = async (emailAddress, password) => {\n        const response = await this.api('/users', 'GET', null, true, {emailAddress, password});\n        if (response.status === 200) {\n            //returns the user data\n            return response.json()\n                .then(responseData => responseData);\n        } else if (response.status === 401) {     \n            //if the user authentication middleware fails, returns null      \n            return null;\n        } else {\n            throw new Error();\n        }\n    }\n\n    createUser = async (user) => {\n      const response = await this.api('/users', 'POST', user);\n      if (response.status === 201) {\n        return [];\n      }\n      else if (response.status === 400) {\n        console.log (response.json()).then(data => {\n         //   console.log(data.errors)\n          return data.errors;\n        });\n      }\n      else {\n        throw new Error();\n      }\n    }\n\n    //method used to call getUser, then sets the user state and cookies if successful\n    signIn = async (emailAddress, password) => {\n        const user = await this.getUser(emailAddress, password);\n        if (user !== null) {\n            const encryptedPassword = btoa(password);\n            this.setState({ \n                authenticatedUser: user,\n                userPassword: encryptedPassword\n            });\n\n            Cookies.set('authenticatedUser', JSON.stringify(user), { expires: 1 });\n            Cookies.set('userPassword', encryptedPassword, { expires: 1});\n        }\n        return user;\n    }\n\n    //method used to sign out the user, removes user state and cookies\n    signOut = () => {\n        this.setState({\n            authenticatedUser: null,\n            userPassword: null\n        });\n        Cookies.remove('authenticatedUser');\n        Cookies.remove('userPassword');\n    }\n\n    //method used to sign up a user, returns an errors array\n    signUp = async (userData) => {\n        const response = await this.api('/users', 'POST', userData);\n        if (response.status === 201) {\n         window.location.href = '/';\n            //returns empty errors array if user successfully created\n            return [];\n        } else if (response.status === 400) {\n            //returns errors array if validation fails\n            return response.json()\n                    .then(responseData => {\n                        return responseData.errors;\n                    })\n        } else if (response.status === 200) {\n            //returns errors array if user already exists\n            return response.json()\n                .then(responseData => {\n                    return [ responseData.message ];\n                })\n        } else {\n            throw new Error();\n        }\n    }\n\n    //method used to create a course, returns an errors array\n    createCourse = async (courseData) => {\n        const  emailAddress  = this.state.authenticatedUser.emailAddress;  \n        const password = atob(this.state.userPassword);\n        const response = await this.api('/courses', 'POST', courseData, true, {emailAddress, password});\n        if (response.status === 201) {\n\n            //returns empty errors array if course successfully created\n            return [];\n\n        } else if (response.status === 400) {\n            //returns errors array if validation fails\n            return response.json()\n               .then(responseData => {\n                  return responseData.errors\n                    })\n        } else {\n            throw new Error();\n        }\n    }\n\n    //method retrieves course data\n    getCourse = async (courseId) => {\n        const response = await this.api(`/courses/${courseId}`, 'GET', null);\n        if (response.status === 200) {\n            //returns course data if course exists\n            return response.json()\n                .then(responseData => responseData);\n        } else if (response.status === 404) { \n            //returns null if course doesn't exist          \n            return null;\n        } else {\n            throw new Error();\n        }\n    }\n\n    //method used to retrieve all course data\n    getCourses = async () => {\n        const response = await this.api(`/courses`, 'GET', null);\n        if (response.status === 200) {\n            //returns all course data if successful\n            return response.json()\n                .then(responseData => responseData);\n        } else {\n            throw new Error();\n        }\n    }\n\n    //method used to update a course, returns an errors array\n    updateCourse = async (courseId, courseData) => {\n        const { emailAddress } = this.state.authenticatedUser;  \n        const password = atob(this.state.userPassword);\n        const response = await this.api(`/courses/${courseId}`, 'PUT', courseData, true, {emailAddress, password});\n        if (response.status === 204) {\n            //returns an empty errors array if course successfully updated\n            return [];\n        } else if (response.status === 400) {\n            //returns errors array if any validation errors\n            return response.json()\n                .then(responseData => {\n                    return responseData.errors;\n                })\n        } else if (response.status === 404){\n           return response.json()\n            .then(responseData => {\n               return responseData.message\n            })\n        }\n        \n        else {\n            throw new Error();\n        }\n    }\n\n    //method used to delete a course\n    deleteCourse = async (courseId) => {\n        const { emailAddress } = this.state.authenticatedUser;  \n        const password = atob(this.state.userPassword);\n        return await this.api(`/courses/${courseId}`, 'DELETE', null, true, {emailAddress, password});\n    }\n    \n    render() {\n        const value = {\n            authenticatedUser: this.state.authenticatedUser,\n            userPassword: this.state.userPassword,\n            actions: {\n                signIn: this.signIn,\n                signOut: this.signOut,\n                signUp: this.signUp,\n                createCourse: this.createCourse,\n                updateCourse: this.updateCourse,\n                getCourse: this.getCourse,\n                deleteCourse: this.deleteCourse,\n                getCourses: this.getCourses,\n                createUser: this.createUser\n            }\n        }\n\n        return ( \n            <Context.Provider value={value}>\n                {this.props.children}\n            </Context.Provider>\n        );\n    }\n}\n\nexport const Consumer = Context.Consumer;\n\n/**\n * A higher-order function that wraps the provided component in a Context.Consumer component. withContext automatically subscribes (or connects) the component passed to it to all actions and context changes. to render anything inside the Consumer, use a Render Prop: a technique for sharing code between React components using a prop whose value is a function. (Borrowed from the React Authentication course on Team Treehouse)\n * @param {class} Component - A React component.\n * @returns {function} A higher-order component.\n */\nexport default function withContext(Component) {\n    return function ContextComponent(props) {\n      return (\n        <Context.Consumer>\n          {context => <Component {...props} context={context} />}\n        </Context.Consumer>\n      );\n    }\n  }","//- Courses - This component provides the \"Courses\" screen by retrieving the list of courses from the REST API's /api/courses route and rendering a list of courses. Each course needs to link to its respective \"Course Detail\" screen. This component also renders a link to the \"Create Course\" screen.\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Courses extends Component {\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n       courses: []\r\n   }\r\n}\r\n   \r\n   componentDidMount() {\r\n       //retrieves all course data from the API\r\n       this.props.context.actions.getCourses()\r\n\r\n         .then(responseData => {\r\n            //sets courses state if successful\r\n            this.setState({ courses: responseData.courses });\r\n            // console.log(this.state.courses)\r\n           })\r\n         .catch(error => {\r\n            console.log(error);\r\n            this.props.history.push('/error');\r\n         });\r\n   };\r\n   \r\n   render () {\r\n       const courseList = this.state.courses.map(course =>\r\n           <div key={course.id} className=\"grid-33\">\r\n               <Link to={`/courses/${course.id}`} className=\"course--module course--link\">\r\n                   <h4 className=\"course--label\">Course</h4>\r\n                   <h3 className=\"course--title\">{course.title}</h3>\r\n               </Link>\r\n           </div>\r\n       )\r\n\r\n       return (\r\n           <div className=\"bounds\">\r\n               {courseList}\r\n               <div className=\"grid-33\">\r\n                   <Link to=\"/courses/create\" className=\"course--module course--add--module\">\r\n                       <h3 className=\"course--add--title\">\r\n                           <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\r\n                               viewBox=\"0 0 13 13\" className=\"add\">\r\n                               <polygon points=\"7,6 7,0 6,0 6,6 0,6 0,7 6,7 6,13 7,13 7,7 13,7 13,6 \"></polygon>\r\n                           </svg>\r\n                           New Course\r\n                       </h3>\r\n                   </Link>\r\n               </div>\r\n           </div>\r\n       );\r\n   }\r\n}\r\n\r\nexport default Courses;","// Header- Displays the top menu bar for the application and includes buttons for signing in and signing up (if there's not an authenticated user) or the user's first and last name and a button for signing out (if there's an authenticated user).\r\n\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n const Header = ({context}) => {\r\n   \r\n    \r\n    const authUser = context.authenticatedUser;\r\n     return (\r\n       <div className=\"header\">\r\n         <div className=\"bounds\">\r\n           <h1 className=\"header--logo\">Courses</h1>\r\n           <nav>\r\n           {authUser ?\r\n             <React.Fragment>\r\n                <span>Welcome, {authUser.firstName} {authUser.lastName}!</span>\r\n                <Link className=\"signout\" to=\"/signout\" >Sign Out</Link>\r\n             </React.Fragment>\r\n             :\r\n             <React.Fragment>\r\n               <Link className=\"signup\" to=\"/signup\">Sign Up</Link>\r\n               <Link className=\"signin\" to=\"/signin\">Sign In</Link>\r\n             </React.Fragment>\r\n           }\r\n           </nav>\r\n         </div>\r\n       </div>\r\n     );\r\n   }\r\n \r\nexport default Header;\r\n ","// // This component provides the \"Course Detail\" screen by retrieving the detail for a course from the REST API's /api/courses/:id route and rendering the course. The component also renders a \"Delete Course\" button that when clicked should send a DELETE request to the REST API's /api/courses/:id route in order to delete a course. This component also renders an \"Update Course\" button for navigating to the \"Update Course\" screen.\r\n\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst ReactMarkdown = require('react-markdown');\r\n\r\nexport default class CourseDetail extends Component {\r\n    state = {\r\n        course: [],\r\n        courseOwner: []\r\n    };\r\n    \r\n    componentDidMount() {\r\n        //retrieves course data from the API\r\n        const courseId = this.props.match.params.id;\r\n        this.props.context.actions.getCourse(courseId)\r\n            .then(responseData => {\r\n                if (responseData !== null) {\r\n                    //sets course state if course found\r\n                    this.setState({ \r\n                        course: responseData.course, \r\n                        courseOwner: responseData.course.User\r\n                        \r\n                    });\r\n\r\n                } else {\r\n                    //redirects user if course not found\r\n                  //   this.props.history.push('/notfound');\r\n                }\r\n            })\r\n                  .catch(error => {\r\n                     console.log(error);\r\n                     this.props.history.push('/error');\r\n            });\r\n      \r\n    };\r\n\r\n    deleteCourse = (courseId) => {\r\n        //deletes a course\r\n        this.props.context.actions.deleteCourse(courseId)\r\n            .then(response => {\r\n                if (response.status === 204) {\r\n                    //redirects to course list if course successfully deleted\r\n                    this.props.history.push('/courses');\r\n                } else if (response.status === 404) {\r\n                    //redirects to notFound if course doesn't exist\r\n                  //   this.props.history.push('/notfound');\r\n                } else if (response.status === 403) {\r\n                    //redirects to forbidden if current user doesn't own the course\r\n                    this.props.history.push('/forbidden');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                this.props.history.push('/error');\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { \r\n            course, \r\n            courseOwner \r\n        } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"actions--bar\">\r\n                    <div className=\"bounds\">\r\n                        <div className=\"grid-100\">\r\n                            <ButtonsDisplay authenticatedUser={this.props.context.authenticatedUser}\r\n                                       courseOwner={courseOwner}\r\n                                       courseId={this.props.match.params.id}\r\n                                       deleteCourse={this.deleteCourse} />\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bounds course--detail\">\r\n                    <div className=\"grid-66\">\r\n                        <div className=\"course--header\">\r\n                            <h4 className=\"course--label\">Course</h4>\r\n                            <h3 className=\"course--title\">{course.title}</h3>\r\n                            <p>By {courseOwner.firstName} {courseOwner.lastName}</p>\r\n                        </div>\r\n                        <div className=\"course--description\">\r\n                            <ReactMarkdown source={course.description} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"grid-25 grid-right\">\r\n                        <div className=\"course--stats\">\r\n                            <ul className=\"course--stats--list\">\r\n                                <li className=\"course--stats--list--item\">\r\n                                    <h4>Estimated Time</h4>\r\n                                    <h3>{course.estimatedTime}</h3>\r\n                                </li>\r\n                                <li className=\"course--stats--list--item\">\r\n                                    <h4>Materials Needed</h4>\r\n                                    <ReactMarkdown source={course.materialsNeeded} />\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//conditionally renders the Update Course and Delete Course buttons and only displays them if the current user is the course owner\r\nconst ButtonsDisplay = (props) => {\r\n    const {\r\n        authenticatedUser,\r\n        courseOwner,\r\n        courseId,\r\n        deleteCourse\r\n    } = props\r\n    let buttonsDisplay;\r\n    if (authenticatedUser) {\r\n        if (authenticatedUser.id === courseOwner.id) {\r\n            buttonsDisplay = (\r\n                <span>\r\n                    <Link to={`/courses/${courseId}/update`} className=\"button\">Update Course</Link>\r\n                    <button onClick={() => {deleteCourse(courseId)}} className=\"button\">Delete Course</button>\r\n                    <Link to=\"/courses\" className=\"button button-secondary\">Return to List</Link>\r\n                </span>\r\n            )\r\n        } else {\r\n         buttonsDisplay = <span><Link to=\"/courses\" className=\"button button-secondary\">Return to List</Link></span>\r\n      }\r\n    } else {\r\n      buttonsDisplay = <span><Link to=\"/courses\" className=\"button button-secondary\">Return to List</Link></span>\r\n   }\r\n\r\n    return buttonsDisplay;   \r\n}\r\n","import React from 'react';\n\nexport default (props) => {\n  const {\n    cancel,\n    errors,\n    submit,\n    submitButtonText,\n    elements,\n  } = props;\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    submit();\n  }\n\n  function handleCancel(event) {\n    event.preventDefault();\n    cancel();\n  }\n\n  return (\n    <div>\n      <ErrorsDisplay errors={errors} />\n      <form onSubmit={handleSubmit}>\n        {elements()}\n        <div className=\"pad-bottom\">\n          <button className=\"button\" type=\"submit\">{submitButtonText}</button>\n          <button className=\"button button-secondary\" onClick={handleCancel}>Cancel</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n//conditionally renders errors\nfunction ErrorsDisplay( {errors} ) {\n  let errorsDisplay = null;\n  if (errors.length) {\n   errorsDisplay = (\n     <div>\n       <h2 className=\"validation--errors--label\">Validation errors</h2>\n       <div className=\"validation-errors\">\n         <ul>\n           {errors.map((error, i) => <li key={i}>{error}</li>)}\n         </ul>\n       </div>\n     </div>\n   );\n }\n\n return errorsDisplay;\n}\n","//- UserSignIn - This component provides the \"Sign In\" screen by rendering a form that allows a user to sign using their existing account information. The component also renders a \"Sign In\" button that when clicked signs in the user and a \"Cancel\" button that returns the user to the default route (i.e. the list of courses).\r\n\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from './Form';\r\n\r\nexport default class UserSignIn extends Component {\r\n  state = {\r\n    emailAddress: '',\r\n    password: '',\r\n    errors: [],\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      emailAddress,\r\n      password,\r\n      errors,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"bounds\">\r\n        <div className=\"grid-33 centered signin\">\r\n          <h1>Sign In</h1>\r\n         \r\n          <Form\r\n            cancel={this.cancel}\r\n            errors={errors}\r\n            submit={this.submit}\r\n            submitButtonText=\"Sign In\"\r\n            elements={() => (\r\n              <React.Fragment>\r\n                <input\r\n                  id=\"emailAddress\"\r\n                  name=\"emailAddress\"\r\n                  type=\"text\"\r\n                  value={emailAddress}\r\n                  onChange={this.change}\r\n                  placeholder=\"Email\" />\r\n                <input\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={password}\r\n                  onChange={this.change}\r\n                  placeholder=\"Password\" />\r\n              </React.Fragment>\r\n            )} />\r\n          <p>\r\n            Don't have a user account? <Link to=\"/signup\">Click here</Link> to sign up!\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  change = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value\r\n      };\r\n    });\r\n  }\r\n\r\n  submit = () => {\r\n    const { context } = this.props;\r\n    const { emailAddress, password } = this.state;\r\n\r\n    //calls signIn() method, stored in Context.\r\n    context.actions.signIn(emailAddress, password)\r\n      .then((user) => {\r\n        //If no user is returned, state gets set to an array with the errors\r\n        if (user === null) {\r\n          this.setState(() => {\r\n            return { errors: [ 'Sign-in was unsuccessful' ] };\r\n          });\r\n        } else {\r\n           //directs use back to home page\r\n         this.props.history.push('/');\r\n          \r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //Logs any other error to the console\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  cancel = () => {\r\n      //redirects the user to the home page.\r\n    this.props.history.push('/');\r\n  }\r\n}\r\n","//- UserSignUp - This component provides the \"Sign Up\" screen by rendering a form that allows a user to sign up by creating a new account. The component also renders a \"Sign Up\" button that when clicked sends a POST request to the REST API's /api/users route and signs in the user. This component also renders a \"Cancel\" button that returns the user to the default route (i.e. the list of courses).\r\n\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Form from './Form';\r\n\r\n\r\nexport default class UserSignUp extends Component {\r\n  state = {\r\n    firstName: '',\r\n    lastName: '',\r\n    emailAddress: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    errors: [],\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      emailAddress,\r\n      password,\r\n      errors,\r\n      confirmPassword\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"bounds\">\r\n        <div className=\"grid-33 centered signin\">\r\n          <h1>Sign Up</h1>\r\n          <Form \r\n            cancel={this.cancel}\r\n            errors={errors}\r\n            submit={this.submit}\r\n            submitButtonText=\"Sign Up\"\r\n            elements={() => (\r\n              <React.Fragment>\r\n                <input \r\n                  id=\"firstName\" \r\n                  name=\"firstName\" \r\n                  type=\"text\"\r\n                  value={firstName} \r\n                  onChange={this.change} \r\n                  placeholder=\"First Name\" />\r\n                  <input \r\n                  id=\"lastName\" \r\n                  name=\"lastName\" \r\n                  type=\"text\"\r\n                  value={lastName} \r\n                  onChange={this.change} \r\n                  placeholder=\"Last Name\" />\r\n                <input \r\n                  id=\"emailAddress\" \r\n                  name=\"emailAddress\" \r\n                  type=\"text\"\r\n                  value={emailAddress} \r\n                  onChange={this.change} \r\n                  placeholder=\"Email Address\" />\r\n                <input \r\n                  id=\"password\" \r\n                  name=\"password\"\r\n                  type=\"password\"\r\n                  value={password} \r\n                  onChange={this.change} \r\n                  placeholder=\"Password\" />\r\n                  <input \r\n                  id=\"confirmPassword\" \r\n                  name=\"confirmPassword\"\r\n                  type=\"password\"\r\n                  value={confirmPassword} \r\n                  onChange={this.change} \r\n                  placeholder=\"Confirm Password\" />\r\n              </React.Fragment>\r\n            )} />\r\n          <p>\r\n            Already have a user account? <Link to=\"/signin\">Click here</Link> to sign in!\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  change = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value\r\n      };\r\n    });\r\n  }\r\n\r\n  submit = () => {\r\n   const {\r\n     firstName,\r\n     lastName,\r\n     emailAddress,\r\n     password,\r\n     confirmPassword\r\n   } = this.state; \r\n\r\n    // New user payload\r\n    const user = {\r\n      firstName,\r\n      lastName,\r\n      emailAddress,\r\n      password\r\n    };\r\n   if (password === confirmPassword){\r\n    this.props.context.actions.signUp(user)\r\n    .then( errors => {\r\n      if (errors.length) {\r\n         this.setState({ errors });\r\n         \r\n       } else {\r\n          this.props.context.actions.signIn(emailAddress, password)\r\n         console.log(`${emailAddress} is successfully signed up and authenticated!`);\r\n       }\r\n     })\r\n   \r\n     .catch( err => { // handle rejected promises\r\n      console.log(err);\r\n      this.props.history.push('/error'); // push to history stack\r\n    }); \r\n    //Creates a string indicating the passwords do not match and pushes it to the errors array\r\n   }else {\r\n      const passMatchError = this.state.errors.push('Passwords must match')\r\n      //Sets the error state to include a message that the passwords do not match\r\n      this.setState({ passMatchError });\r\n   }\r\n}\r\n\r\n  cancel = () => {\r\n   this.props.history.push('/');\r\n  }\r\n}\r\n","// UserSignOut - This component is a bit of an oddball as it doesn't render any visual elements. Instead, it signs out the authenticated user and redirects the user to the default route (i.e. the list of courses).\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n   \r\n   const UserSignOut = (props) => {\r\n       //sends a request to sign out the user and redirect to the course list\r\n       props.context.actions.signOut();\r\n   \r\n       return ( \r\n           <Redirect to=\"/courses\" />\r\n       );\r\n   }\r\n    \r\n   export default UserSignOut;","//- CreateCourse - This component provides the \"Create Course\" screen by rendering a form that allows a user to create a new course. The component also renders a \"Create Course\" button that when clicked sends a POST request to the REST API's /api/courses route. This component also renders a \"Cancel\" button that returns the user to the default route (i.e. the list of courses).\r\nimport React, { Component } from 'react';\r\n\r\nimport Form from './Form';\r\n\r\nexport default class CreateCourse extends Component {\r\n  /* Properties the user needs to complete for a new course.*/\r\n  state = {\r\n    title: '',\r\n    description: '',\r\n    estimatedTime: '',\r\n    materialsNeeded: '',\r\n    userId: this.props.context.authenticatedUser.id,\r\n    errors: []\r\n  }\r\n  \r\n  change = (event) => {\r\n   const name = event.target.name;\r\n   const value = event.target.value;\r\n\r\n   this.setState(() => {\r\n     return {\r\n       [name]: value\r\n     };\r\n   });\r\n}\r\n\r\n submit = () => {\r\n   const {context} = this.props;\r\n   const {\r\n     title,\r\n     description,\r\n     estimatedTime,\r\n     materialsNeeded,\r\n     userId\r\n   } = this.state;\r\n   const {emailAddress} = context.authenticatedUser;\r\n   const password = context.userPassword;\r\n\r\n   const course = {\r\n     title,\r\n     description,\r\n     estimatedTime,\r\n     materialsNeeded,\r\n     userId\r\n   }\r\n   //Calls createCourse() method, stored in Context.\r\n   context.actions.createCourse(course, {emailAddress, password})\r\n   .then( errors => {\r\n      if (errors.length) {\r\n          //if there are errors, sets the errors state\r\n          this.setState({ errors });\r\n      } else {\r\n          //if there aren't any errors, redirects to the course list\r\n          this.props.history.push('/courses');\r\n      }\r\n  })\r\n  .catch( error => {\r\n      console.log(error);\r\n      this.props.history.push('/error');\r\n  })\r\n\r\n}\r\n\r\n cancel = () => {\r\n   //redirects the user to the home page. \r\n   this.props.history.push('/');\r\n }\r\n\r\n  render() {\r\n    const { context } = this.props;\r\n    const {\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded,\r\n      errors,\r\n    } = this.state;\r\n    const ownerName = `${context.authenticatedUser.firstName} ${context.authenticatedUser.lastName}`\r\n\r\n    return (\r\n        <div className=\"bounds course--detail\">\r\n          <h1>Create Course</h1>\r\n          \r\n          <Form\r\n            cancel={this.cancel}\r\n            errors={errors}\r\n            submit={this.submit}\r\n            submitButtonText=\"Create Course\"\r\n            elements={() => (\r\n              <React.Fragment>\r\n                <div className=\"grid-66\">\r\n                  <div className=\"course--header\">\r\n                  <h4 className=\"course--label\">Course</h4>\r\n                    <input\r\n                      id=\"title\"\r\n                      name=\"title\"\r\n                      className=\"input-title course--title--input\"\r\n                      type=\"text\"\r\n                      value={title}\r\n                      onChange={this.change}\r\n                      placeholder=\"Course Title...\" />\r\n                    <p>by {ownerName}</p>\r\n                  </div>\r\n                  <div className=\"course--description\">\r\n                    <textarea\r\n                      id=\"description\"\r\n                      name=\"description\"\r\n                      type=\"text\"\r\n                      value={description}\r\n                      onChange={this.change}\r\n                      placeholder=\"Course Description...\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"grid-25 grid-right\">\r\n                  <div className=\"course--stats\">\r\n                    <ul className=\"course--stats--list\">\r\n                      <li className=\"course--stats--list--item\">\r\n                        <h4>Estimated Time</h4>\r\n                        <input\r\n                          id= \"estimatedTime\"\r\n                          name = \"estimatedTime\"\r\n                          type=\"text\"\r\n                          value={estimatedTime}\r\n                          onChange={this.change}\r\n                          placeholder=\"Hours\"\r\n                        />\r\n                      </li>\r\n                      <li className=\"course--stats--list--item\">\r\n                        <h4>Materials Needed</h4>\r\n                        <textarea\r\n                          id=\"materialsNeeded\"\r\n                          name=\"materialsNeeded\"\r\n                          type=\"text\"\r\n                          value={materialsNeeded}\r\n                          onChange={this.change}\r\n                          placeholder=\"Materials Needed...\"\r\n                        />\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                </div>\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n        </div>\r\n    )\r\n  };\r\n\r\n}\r\n","// This component provides the \"Update Course\" screen by rendering a form that allows a user to update one of their existing courses. The component also renders an \"Update Course\" button that when clicked sends a PUT request to the REST API's /api/courses/:id route. This component also renders a \"Cancel\" button that returns the user to the \"Course Detail\" screen.\r\nimport React, { Component } from 'react';\r\n\r\nimport Form from './Form.js';\r\n\r\nexport default class UpdateCourse extends Component {\r\n  state = {\r\n    title: '',\r\n    description: '',\r\n    estimatedTime: '',\r\n    materialsNeeded: '',\r\n    ownerName: '',\r\n    errors: []\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const { context } = this.props;\r\n    await context.actions.getCourse(this.props.match.params.id)\r\n      .then(course => {\r\n        const {\r\n          title,\r\n          description,\r\n          estimatedTime,\r\n          materialsNeeded\r\n        } = course.course;\r\n    \r\n        const ownerName = `${context.authenticatedUser.firstName} ${context.authenticatedUser.lastName}`\r\n\r\n        this.setState({\r\n          title,\r\n          description,\r\n          estimatedTime,\r\n          materialsNeeded,\r\n          ownerName,\r\n          course\r\n        })\r\n      });\r\n\r\n      /* Redirects user to forbidden path if they do not own the course */\r\n      if (this.state.course.course.userId !== context.authenticatedUser.id) {\r\n        this.props.history.push('/forbidden');\r\n      }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded,\r\n      ownerName,\r\n      errors\r\n    } = this.state;\r\n\r\n    return(\r\n      <div className=\"bounds course--detail\">\r\n        <h1>Update Course</h1>\r\n        \r\n        <div>\r\n          <Form\r\n            cancel={this.cancel}\r\n            errors={errors}\r\n            submit={this.submit}\r\n            submitButtonText=\"Update Course\"\r\n            elements={() => (\r\n              <React.Fragment>\r\n              <div className=\"grid-66\">\r\n                <div className=\"course--header\">\r\n                  <input\r\n                    id=\"title\"\r\n                    name=\"title\"\r\n                    className=\"input-title course--title--input\"\r\n                    type=\"text\"\r\n                    value={title}\r\n                    onChange={this.change}\r\n                    placeholder=\"Course Title...\" />\r\n                  <p>by {ownerName}</p>\r\n                </div>\r\n                <div className=\"course--description\">\r\n                  <textarea\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    type=\"text\"\r\n                    value={description}\r\n                    onChange={this.change}\r\n                    placeholder=\"Course Description...\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"grid-25 grid-right\">\r\n                <div className=\"course--stats\">\r\n                  <ul className=\"course--stats--list\">\r\n                    <li className=\"course--stats--list--item\">\r\n                      <h4>Estimated Time</h4>\r\n                        <input\r\n                        id=\"estimatedTime\"\r\n                        name=\"estimatedTime\"\r\n                        type=\"text\"\r\n                        value={estimatedTime}\r\n                        onChange={this.change}\r\n                        placeholder=\"Hours\"\r\n                        />\r\n                    </li>\r\n                    <li className=\"course--stats--list--item\">\r\n                      <h4>Materials Needed</h4>\r\n                        <textarea\r\n                          id=\"materialsNeeded\"\r\n                          name=\"materialsNeeded\"\r\n                          type=\"text\"\r\n                          value={materialsNeeded}\r\n                          onChange={this.change}\r\n                          placeholder=\"Materials Needed...\"\r\n                        />\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n              </React.Fragment>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  change = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value\r\n      };\r\n    });\r\n  }\r\n\r\n  submit = () => {\r\n    const { context } = this.props;\r\n    const {\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded\r\n    } = this.state;\r\n    const {id} = this.state.course.course;\r\n    const {emailAddress} = context.authenticatedUser;\r\n    const password = context.authenticatedUserPassword;\r\n    const courseData = {\r\n      title,\r\n      description,\r\n      estimatedTime,\r\n      materialsNeeded\r\n    }\r\n    ///Calls updateCourse() method, stored in Context.\r\n    context.actions.updateCourse(id, courseData,  {emailAddress, password})\r\n    .then( errors => {\r\n      if (errors.length) {\r\n          //if there are errors, sets the errors state\r\n          this.setState({ errors });\r\n      }\r\n       else {\r\n          //if there aren't any errors, redirects to the course detail page\r\n          this.props.history.push(`/courses/${id}`);\r\n      }\r\n  })\r\n  .catch( err => {\r\n      console.log(err);\r\n      this.props.history.push('/error');\r\n  })   \r\n}\r\n\r\n  cancel = () => {\r\n      //redirects the user to the course page. \r\n    const {id} = this.state.course.course;\r\n    this.props.history.push(`/courses/${id}`);\r\n  }\r\n}\r\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Consumer } from './Context';\n\nexport default ({ component: Component, ...rest }) => {\n  return (\n    <Consumer>\n      {context => (\n        <Route\n          {...rest}\n          render={props => context.authenticatedUser ? (\n              <Component {...props} />\n            ) : (\n              <Redirect to={{\n                pathname: '/signin',\n                state: { from: props.location }\n              }} />\n            )\n          }\n        />\n    )}\n    </Consumer>\n  );\n};","import React from 'react';\n\nexport default () => ( \n    <div className=\"bounds\">\n        <h1>Unexpected Error</h1>\n        <p>An internal server error has occurred, please try again later</p>\n    </div>\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n    <div className=\"bounds\">\n        <h1>Forbidden</h1>\n        <p>Nice try! You are not authorized to access this page.</p>\n        <Link to=\"/courses\" className=\"button button-secondary\">Return to List</Link>\n    </div> \n)","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default () => (\n  <div className=\"bounds\">\n    <h1>Not Found</h1>\n    <p>Oops! We couldn't find that page.</p>\n    <Link to=\"/courses\" className=\"button button-secondary\">Return to List</Link>\n  </div>\n);","import React from 'react';\nimport {\n   BrowserRouter as Router,\n   Route,\n   Switch\n } from 'react-router-dom';\n//imports components\nimport withContext from './Context';\nimport Courses from './components/Courses';\nimport Header from './components/Header';\nimport CourseDetail from './components/CourseDetail';\nimport UserSignIn from './components/UserSignIn';\nimport UserSignUp from './components/UserSignUp';\nimport UserSignOut from './components/UserSignOut';\nimport CreateCourse from './components/CreateCourse';\nimport UpdateCourse from './components/UpdateCourse';\nimport PrivateRoute from './PrivateRoute';\nimport UnhandledError from './components/UnhandledError';\nimport Forbidden from './components/Forbidden';\nimport NotFound from './components/NotFound';\n\n\nconst CoursesWithContext = withContext(Courses);\nconst HeaderWithContext = withContext(Header);\nconst CourseDetailWithContext = withContext(CourseDetail);\nconst UserSignInWithContext = withContext(UserSignIn);\nconst UserSignUpWithContext = withContext(UserSignUp);\nconst UserSignOutWithContext = withContext(UserSignOut);\nconst CreateCourseWithContext = withContext(CreateCourse);\nconst UpdateCourseWithContext = withContext(UpdateCourse);\n\n\nconst App = () => (\n   <Router>\n      <div>\n        <HeaderWithContext />\n      <Switch>\n         <Route exact path='/' component={CoursesWithContext}/>\n         <Route exact path='/courses' component={CoursesWithContext} />\n         <PrivateRoute exact path='/courses/create' component={CreateCourseWithContext} />\n         <Route exact path='/signin' component={UserSignInWithContext} />\n         <Route exact path='/signup' component={UserSignUpWithContext} />\n         <Route exact path='/signout' component={UserSignOutWithContext} />\n         <PrivateRoute exact path='/courses/:id/update' component={UpdateCourseWithContext} />\n         <Route exact path='/courses/:id' component={CourseDetailWithContext} />\n         <Route path=\"/error\" component={UnhandledError} />\n         <Route path=\"/forbidden\" component={Forbidden} />\n         <Route path=\"/notfound\" component={NotFound} />\n         <Route component={NotFound} />           \n      </Switch>\n      </div>\n   </Router>\n);\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.css';\n\nimport { Provider } from './Context';\n\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n<Provider>\n   <App />\n</Provider>, \ndocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}